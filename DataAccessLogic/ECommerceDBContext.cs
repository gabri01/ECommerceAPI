// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore.Storage;
using System.Data;

using Interfaces;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.Security.Claims;
using Models;
using Microsoft.AspNetCore.Authorization;

namespace DataAccessLogic
{
    public partial class ECommerceDBContext : DbContext, IDAL
    {
        private readonly string connString;

        public ECommerceDBContext(string connString)
        {
            this.connString = connString;
        }

        public ECommerceDBContext(DbContextOptions<ECommerceDBContext> options) : base(options) {}

        public virtual DbSet<Categorium> Categoria { get; set; }
        public virtual DbSet<Corriere> Corrieres { get; set; }
        public virtual DbSet<Ordine> Ordines { get; set; }
        public virtual DbSet<Pagamento> Pagamentos { get; set; }
        public virtual DbSet<Prodotto> Prodottos { get; set; }
        public virtual DbSet<Ruolo> Ruolos { get; set; }
        public virtual DbSet<Utente> Utentes { get; set; }
        public virtual DbSet<Ordiniprodotti> Ordiniprodottis { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(this.connString);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ordine>(entity =>
            {
                entity.HasOne(d => d.IDCorriereNavigation)
                    .WithMany(p => p.Ordines)
                    .HasForeignKey(d => d.IDCorriere)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ordine_Corriere");

                entity.HasOne(d => d.IDUtenteNavigation)
                    .WithMany(p => p.Ordines)
                    .HasForeignKey(d => d.IDUtente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ordine_Utente");

                entity.HasOne(d => d.IdPagamentoNavigation)
                    .WithMany(p => p.Ordines)
                    .HasForeignKey(d => d.IdPagamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ordine_Pagamento");
            });

            modelBuilder.Entity<Ordiniprodotti>(entity =>
            {
                entity.HasOne(d => d.IDOrdineNavigation)
                    .WithMany(p => p.Ordiniprodottis)
                    .HasForeignKey(d => d.IDOrdine)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ordiniprodotti_Ordine");

                entity.HasOne(d => d.IDProdottoNavigation)
                    .WithMany(p => p.Ordiniprodottis)
                    .HasForeignKey(d => d.IDProdotto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ordiniprodotti_Prodotto1");
            });

            modelBuilder.Entity<Prodotto>(entity =>
            {
                entity.HasOne(d => d.IDCategoriaNavigation)
                    .WithMany(p => p.Prodottos)
                    .HasForeignKey(d => d.IDCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prodotto_Categoria");
            });


            modelBuilder.Entity<Utente>(entity =>
            {

                //entity.HasOne(d => d.IDRuoloNavigation)
                //    .WithMany(p => p.Utentes)
                //    .HasForeignKey(d => d.IDRuolo)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_Utente_Ruolo");

                entity.Property(e => e.Email).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public bool EsisteUtente(Login Utente)
        {
            try
            {
                Utente EsisteUtente = (from u in Utentes
                                       where u.Email == Utente.Email
                                       && u.Password == Utente.Password
                                       select u).SingleOrDefault();
                if (EsisteUtente == null)
                    throw new InvalidOperationException();
                return true;
            }
            catch (InvalidOperationException)
            {
                return false;
            }
        }

        public string Login(Login Utente)
        {
            string Key = "MNU66iBl3T5rh6H52i69";
            var SymmetricKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Key));
            var Credentials = new SigningCredentials(SymmetricKey, SecurityAlgorithms.HmacSha256);
            string Duration = "60";

            Claim[] Claims = new[]
            {
                new Claim("Email", Utente.Email)
            };

            var JwtToken = new JwtSecurityToken
            (
                issuer: "localhost",
                audience: "localhost",
                claims: Claims,
                expires: DateTime.Now.AddMinutes(Int32.Parse(Duration)),
                signingCredentials: Credentials
            );
            return new JwtSecurityTokenHandler().WriteToken(JwtToken);
        }

        public bool VerificaUtenteEsistente(string Email)
        {
            try
            {
                Utente UtenteEsistente = this.Utentes.SingleOrDefault(Em => Em.Email == Email);
            }
            catch (InvalidOperationException)
            {
                return true;
            }
            return false;
        }

        public long Registrazione(Registrazione NuovoUtente)
        {
            Utente Utente = new Utente()
            {
                Cognome = NuovoUtente.Cognome,
                Nome = NuovoUtente.Nome,
                Email = NuovoUtente.Email,
                Password = NuovoUtente.Password,
                IDRuolo = 2
            };
            var InsertUtente = this.Utentes.Add(Utente);
            this.SaveChanges();  
            Utente UtenteInserito = this.Utentes.SingleOrDefault(Ema => Ema.Email.Equals(NuovoUtente.Email));
            return UtenteInserito.ID;
        }

        public bool AutenticazioneUtente(Utente Utente)
        {
            var EsisteUtente = from u in this.Utentes
                               where u.Email == Utente.Email
                               && u.Password == Utente.Password
                               && u.ID == Utente.ID
                               select u;
            foreach (var elem in EsisteUtente)
            {
                return false;
            }
            return true;
        }
        public bool ModificaUtente(Registrazione Utente, string Nome, string Cognome, string Email)
        {
            using (IDbContextTransaction transaction = this.Database.BeginTransaction())
            {
                try
                {
                    Utente EsisteUtente = (from u in Utentes
                                           where
                                           u.Nome == Utente.Nome
                                           && u.Cognome == Utente.Cognome
                                           && u.Email == Utente.Email
                                           && u.Password == Utente.Password
                                           select u).SingleOrDefault();

                    if (EsisteUtente != null)
                    {
                        this.SaveChanges();
                        transaction.Commit();
                        return true;
                    }
                }
                catch (InvalidOperationException)
                {
                    transaction.Rollback();  
                }
            }
            return false;
        }

        public List<Prodotto> GetAllProdotti()
        {
            return this.Prodottos.ToList();
        }

        public long InsertProdotto(Prodotto prodotto)
        {
            Prodotto product = new Prodotto()
            {
                Nome = prodotto.Nome,
                Quantita = prodotto.Quantita,
                Prezzo = prodotto.Prezzo,
                IDCategoria = prodotto.IDCategoria
            };
            var InsertProdotto = this.Prodottos.Add(product);
            this.SaveChanges();
            return prodotto.ID;
        }

        public List<OrdiniUtente> GetOrdiniUtente(Utente Utente)
        {
            var OrdiniQuery = from o in this.Ordines
                              join u in this.Utentes
                                on o.IDUtente equals u.ID
                              join op in this.Ordiniprodottis
                                on o.ID equals op.IDOrdine
                              join p in this.Prodottos
                                  on op.IDProdotto equals p.ID
                              where u.ID == Utente.ID
                              group new { op, p } by o.ID into ordineGroup
                              select new OrdiniUtente()
                              {
                                  IDOrdine = ordineGroup.Key,
                                  IDUtente = Utente.ID,
                                  Prodotti = ordineGroup.Select(item => new Prodotto
                                  {
                                      ID = item.p.ID,
                                      Nome = item.p.Nome,
                                      Quantita = item.op.Quantita
                                  }).ToList()
                              };

            return OrdiniQuery.ToList();
        }


        public bool InsertOrdine(NuovoOrdine Ordine)
        {
            using (IDbContextTransaction transaction = this.Database.BeginTransaction())
            {
                try
                {
                    foreach (Prodotto Prodotto in Ordine.Prodotti)
                    {
                        Prodotto ProdottoEsiste = this.Prodottos.SingleOrDefault(p => p.ID == Prodotto.ID);
                        if (ProdottoEsiste == null)
                            throw new InvalidOperationException();

                        if (ProdottoEsiste.Quantita < Prodotto.Quantita)
                            throw new InvalidOperationException();

                        ProdottoEsiste.Quantita -= Prodotto.Quantita;

                        Ordine NuovoOrdine = new Ordine()
                        {
                            IDUtente = Ordine.IDUtente,
                            Data = DateTime.Now,
                            Stato = "In attesa",
                            IdPagamento = Ordine.IdPagamento,
                            IDCorriere = Ordine.IDCorriere,
                            IndirizzoSpedizione = Ordine.IndirizzoSpedizione
                        };

                        this.Ordines.Add(NuovoOrdine);

                        Ordiniprodotti DettaglioOrdine = new Ordiniprodotti()
                        {
                            IDOrdine = NuovoOrdine.ID,
                            IDProdotto = Prodotto.ID,
                            Quantita = Prodotto.Quantita
                        };

                        this.Ordiniprodottis.Add(DettaglioOrdine);

                        this.SaveChanges();
                    }
                }
                catch (InvalidOperationException)
                {
                    transaction.Rollback();
                    return false;
                }

                transaction.Commit();
                return true;
            }
        }




    }
}